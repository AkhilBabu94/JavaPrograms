package impl;

import cucumber.api.java.sl.In;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Programs {

//    reverse a string using recursive
    public String reverseStringRecursive(String str)
    {
    if(str.isEmpty())
    {
        System.out.println("String is empty.");
        return str;
    }
    else
    {
        return reverseStringRecursive(str.substring(1))+str.charAt(0);
    }
    }

//    program to find 3rd largest number from array
    public int getThirdLargestNumber(int[] a){
        int temp;
        for (int i = 0; i < a.length; i++)
        {
            for (int j = i + 1; j < a.length; j++)
            {
                if (a[i] > a[j])
                {
                    temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                }
            }
        }
        return a[a.length-3];

//        or
//        Arrays.sort(a);
//        return a[a.length-3];
    }

//    program to merge 2 arrays without duplicates and in sorting order.
    public int[] concatSortedArray(int[]a,int[]b){
        return IntStream.concat(IntStream.of(a),IntStream.of(b))
                .sorted()
                .distinct()
                .toArray();

//        or
//        TreeSet<Integer> aa = new TreeSet<>();
//        for(int i=0;i<a.length;i++){
//            aa.add(a[i]);
//        }
//        for(int i=0;i<b.length;i++){
//            aa.add(b[i]);
//        }
//        System.out.println("Array is "+aa.toString());
    }

//    program to find the least mean from these two arrays
    public void leastMinBetween2ArrayPairs()
    {
        int[] a={1,2,3,21};
        int[] b={5,19,15,9,7};
        int j=0;
        int k=0;
        Arrays.sort(a);
        Arrays.sort(b);
        int result = Integer.MAX_VALUE;
//            MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();
        HashMap<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
        List<Integer> list = new ArrayList<>();
        while(j<a.length&&k<b.length){
            int abs = Math.abs(a[j] - b[k]);
            if(abs<=result){
                if(abs<result){
                    list = new ArrayList<>();
                }
                list.add(a[j]);
                list.add(b[k]);
                result= abs;
                map.put(result,list);
            }
            if(a[j]<b[k]){
                j++;
            }else{
                k++;
            }
        }
        for(Integer s:map.keySet()){
            if(s.equals(result)){
                int l=0;
                List<Integer> hello = new ArrayList<>();
                hello=map.get(s);
                while(l<hello.size()){
                    System.out.println("The pairs are ["+hello.get(l)+","+hello.get(l+1)+"]");
                    l=l+2;
                }
            }
        }
    }

//    program to find 3rd highest repeated characters from string.
    public void thirdHighestRepeatedChar(){
        String str = "aaaabbbABBCCCCC";
            Map<Character,Integer> map = new HashMap<>();
            map.put(str.charAt(0),1);
            for (int i=1; i< str.length(); i++){
                if(map.containsKey((str.charAt(i)))){
                    map.put(str.charAt(i),map.get(str.charAt(i))+1);
                }else
                {
                    map.put(str.charAt(i),1);
                }
            }
            TreeSet<Integer> values = new TreeSet<>(map.values());
            Object thirdhighest = values.toArray()[values.size()-3];
            System.out.println("map is "+map.toString()+"third highest value is "+values.toArray()[values.size()-3]);
            for(Character p:map.keySet()){
                if(map.get(p).equals(thirdhighest)){
                    System.out.println("Character is "+p);
                }
            }
    }

//    program to sort the map based on values.
        public void sortMapBasedOnValues(Map<Character,Integer> map) {
            Map<Character, Integer> result = map.entrySet()
                    .stream()
                    .sorted(Map.Entry.comparingByValue())
                    .collect(Collectors.toMap(
                            Map.Entry::getKey,
                            Map.Entry::getValue,
                            (oldValue, newValue) -> oldValue, LinkedHashMap::new));
            System.out.println("Sorted map new based on value is " + result.toString());
        }

//    program to find duplicate characters from string.
    public void findDuplicateCharacters(){
        String str="selenium is used automating browser";
        Map<Character,Integer> map = new HashMap<>();
        map.put(str.charAt(0),1);
        for (int i=1; i< str.length(); i++){
            if(map.containsKey((str.charAt(i)))){
                map.put(str.charAt(i),map.get(str.charAt(i))+1);
            }else
            {
                map.put(str.charAt(i),1);
            }
        }
        StringBuilder s = new StringBuilder();
        for(Character p:map.keySet()){
            if(map.get(p)>1){
                s.append(p);
            }
        }
        System.out.println("Duplicate Characters are "+s);
    }

//    program to sort array.
    public void sortArray()
    {
        int[]arr = {90, 23, 5, 109, 12, 22, 67, 34};
        Arrays.sort(arr);
        for (int i = 0; i < arr.length; i++)
        {
            System.out.println(arr[i]);
        }

//        or
        for (int i=0; i<arr.length; i++)
        {
            for (int j=i+1; j<arr.length; j++)
            {
                int temp = 0;
                if (arr[i] > arr[j])
                {
                    temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
//prints the sorted array elements
            System.out.println(arr[i]);
        }
    }

//    convert starting character of a word to camelCase.
    public void camelcaseStartingCharaterOfWord(){
        String s = "hi hello how are you";
        char ch[] = s.toCharArray();
        for (int i = 1; i < ch.length; i++)
        {
            // check for spaces in the sentence
            ch[0] = Character.toUpperCase(ch[0]);
            if (ch[i] == ' ')
            {
                // conversion into upper case
                ch[i + 1] = Character.toUpperCase(ch[i + 1]);
                continue;
            }
        }
        for (int i = 0; i < ch.length; i++)
        {
            System.out.print(ch[i]);
        }
    }

//    reverse the sentence
    public void reverseTheSentence()
    {
        String inputString = "Hi how are you";
        String[] words = inputString.split(" ");
        String outputString = "";
        for (int i = words.length-1; i >= 0; i--)
        {
            outputString = outputString + words[i] + " ";
        }
        System.out.println("The required sentence is "+outputString);
    }


//    setup JDBC connection
    public void dbrelated() throws ClassNotFoundException, SQLException {
        //Connection db URL
        String dbUrl = "";
        //Database Username
        String username = "";
        //Database Password
        String password = "";
        //Query to Execute
        String query = "select *  from employee;";
        //Load mysql jdbc driver
        Class.forName("com.mysql.jdbc.Driver");
        //Create Connection to DB
        Connection con = DriverManager.getConnection(dbUrl,username,password);
        //Create Statement Object
        Statement stmt = con.createStatement();
        // Execute the SQL Query. Store results in ResultSet
        ResultSet rs= stmt.executeQuery(query);
        // While Loop to iterate through all data and print results
        while (rs.next()){
            String myName = rs.getString(1);
            String myAge = rs.getString(2);
            System. out.println(myName+"  "+myAge);
        }
        // closing DB Connection
        con.close();
    }

//    compare two txt files.
    public void compareTwoTextFiles() throws IOException {
        File f1 = new File("C:\\example\\1.txt");
        File f2 = new File("C:\\example\\2.txt");
        boolean result = FileUtils.contentEqualsIgnoreEOL(f1, f2, "utf-8");
        if(!result){
            System.out.println("Files content are not equal.");
        }else{
            System.out.println("Files content are equal.");
        }
    }

}
